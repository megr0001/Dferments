---
import MainLayout from "../../layouts/MainLayout.astro";
export async function getStaticPaths() {
  const data = await fetch("https://jzfjblexhwoijgbgmixy.supabase.co/rest/v1/dferments",
  {
    method: "GET",
    headers: {
        apikey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp6ZmpibGV4aHdvaWpnYmdtaXh5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTAzNDIxMTQsImV4cCI6MjAyNTkxODExNH0.O7nP4UolRZVDGhGQ3-0RoYhP0SEzLOyHHhp125SwNvw"
    },
}
).then((response) => response.json());

  return data.map((product) => {
    return {
      params: { slug: product.slug },
      props: { myData: product },
    };
  });
}

const { slug } = Astro.params;
const { product } = Astro.props;

const { myData } = Astro.props;
// console.log(myData);
---

<!-- dot notation virkede ikke = {myData.artistname} i stedet lÃ¸st med bracket notation -->
<MainLayout title={myData['product_name']}>
    <h1>{myData['product_name']}</h1>

    <div class="carousel_container">
        <div class="carousel">
            <div class="item active">
                <img src={myData['img']} alt={myData['product_name']}>
            </div>
            <div class="item">
                <img src={myData['img']} alt={myData['product_name']}>
            </div>
            <div class="item">
                <img src={myData['img']} alt={myData['product_name']}>
            </div>
        </div>
        <button class="btn prev"><img src="/img/products/arrowleft.svg" alt="left arrow svg"></button>
        <button class="btn next"><img src="/img/products/arrowright.svg" alt="right arrow svg"></button>
        <div class="dots"></div>
     </div>
</MainLayout>

<style>
  h1 {
        text-transform: uppercase;
        color: var(--red);
        font-family: var(--h1-font);
        text-align: center;
        margin: 48px 0 40px 0;
        font-size: var(--h1-sizeM)
    }
.carousel_container {
  width: 90%;
  margin: auto;
  position: relative;
  display: flex;
  flex-direction: column;
 align-items: center;
    /* min-height: 100dvh; */
  .carousel {
    width: 100%;
    height: auto;
    position: relative;
    .item {
      opacity: 0;
      width: 100%;
      height: 100%;
      display: none;
      transition: opacity 0.5s ease-in-out;

      img {
        width: 100%;
        height: auto;
        object-position: center;
        border-radius: 10px;
        margin-bottom: 58px;
      }
      &.active {
        opacity: 1;
        display: block;
      }
    }
  }
  .btn {
    padding: 40px 0;
    position: absolute;
    transform: translateY(-50%);
    top: 50%;
    border: none;
    cursor: pointer;
    width: 12%;
    height: auto;
    background-color: transparent;
    transition: transform 0.2s ease-in-out;

    &:active,
    &:focus {
    transform: scale(1);
    }

    &:hover {
      filter: drop-shadow(0 0 0.75rem crimson);
    }
  }

  .prev {
    left: -6%;
  }

  .next {
    right: -6%;
  }

  .dots {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    margin-top: 122%;
    gap: 16px;

    .dot {
      cursor: pointer;
      height: 14px;
      width: 14px;
      border-radius: 10px;
      border-color: var(--red);
      background-color: var(--yellow600);
      transition: background-color 0.2s ease;

      &.active,
      &:hover {
        background-color: var(--codGrey);
      }
    }
  }
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
  let carousel = document.querySelector(".carousel");
  let items = carousel.querySelectorAll(".item");
  let dotsContainer = document.querySelector(".dots");

  // Insert dots into the DOM
  items.forEach((_, index) => {
    let dot = document.createElement("span");
    dot.classList.add("dot");
    if (index === 0) dot.classList.add("active");
    dot.dataset.index = index.toString();
    dotsContainer.appendChild(dot);
  });

  let dots = document.querySelectorAll(".dot");

  // Function to show a specific item
  function showItem(index) {
    items.forEach((item, idx) => {
      item.classList.remove("active");
      dots[idx].classList.remove("active");
      if (idx === index) {
        item.classList.add("active");
        dots[idx].classList.add("active");
      }
    });
  }

  // Event listeners for buttons
  document.querySelector(".prev").addEventListener("click", () => {
    let index = [...items].findIndex((item) =>
      item.classList.contains("active")
    );
    showItem((index - 1 + items.length) % items.length);
  });

  document.querySelector(".next").addEventListener("click", () => {
    let index = [...items].findIndex((item) =>
      item.classList.contains("active")
    );
    showItem((index + 1) % items.length);
  });

  // Event listeners for dots
  dots.forEach((dot) => {
    dot.addEventListener("click", () => {
      let index = parseInt((dot as HTMLSpanElement).dataset.index!);
      showItem(index);
    });
  });
});
</script>