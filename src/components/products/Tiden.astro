---
const {h2} = Astro.props
const {p} = Astro.props
const {billede} = Astro.props
const {buttontxt} = Astro.props
---

<div class="tiden">
  <div class="image_container">
  <img src={billede}>
  <div class="overlay">
  <div class="standard">
		<h2>{h2}</h2>
		<p>{p}</p>
         <div class="button">Past</div>
    </div> 
    </div>
    </div>
  
  <div class="hover" style="display: none;">			
		<div class="description">
		<p>Kombucha, enjoy , taste ....</p>
        </div>
	</div>
    
    <div class="pastitems"></div>
        <ul class="products" style="display: none;">
        <!-- kombucha -->
        <li>hej</li>
        <!-- kombucha -->
        <li>yo</li>
        <!-- kombucha -->
        <li>man</li>
    </ul>
    </div>
</div>

<style>
.tiden {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0 1.5rem 1rem 1.5rem;
}
.image_container {
  position: relative;
  display: inline-block;
}

.image_container img {
  display: block;
  width: 100%;
  height: auto;
  border-radius: 10px;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0),
    rgba(0, 0, 0, 0.4)
  );
  border-radius: 10px;
  z-index: 1;
  pointer-events: none; /* Sikrer at overlayet ikke forstyrrer klik */
}

.standard {
    position: absolute;
    /* width: 382px;
  height: 252.19px;
  border-radius: 10px; */
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
}

.standard h2, p {
    color: beige;
      position: absolute;
}

.standard h2 {
    font-size: 24px;
    bottom: 40px;
  left: 16px;
    text-transform: uppercase;
}

.standard p {
      font-size: 18px;
    bottom: 8px;
  left: 16px;
}

.button {
position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
   background-color: transparent;
  border: 2px solid beige;
  border-radius: 10px;
  color: beige;
  font-size: 18px;
  font-weight: bold;
  padding: 10px 20px;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
   animation: pulse 2s infinite alternate;
   pointer-events: auto; /* Sikrer at knappen kan klikkes */
}

.button:hover {
  background-color: orange;
  color: beige;
  border-color: orange;
  box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.5);
  animation: none; /* Stop pulse animation on hover */
}


@keyframes pulse {
  0% {
    transform: translate(-50%, -50%) scale(1);
  }
  100% {
    transform: translate(-50%, -50%) scale(1.1);
  }
}

.button.clicked {
  background-color: #000000;
  color: #ffffff;
  animation: none; /* Stop pulse animation when clicked */
    transform: translate(-50%, -50%) scale(1.1);
}

.pastitems {
  display: none; /* Initially hidden */
}

.products {
  list-style: none;
  padding: 0;
  margin: 0;
  background-color: orange;
}

.products li {
  margin: 10px 0;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  transition: background 0.3s ease-in-out;
}


.products li:hover {
  background: #e0e0e0;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const buttons = document.querySelectorAll('.button');
  let currentOpen: HTMLElement | null = null;

  buttons.forEach(button => {
    button.addEventListener('click', function(event) {
      const parent = button.closest('.tiden') as HTMLElement;
      const pastItems = parent.querySelector('.pastitems') as HTMLElement;
      const productsList = parent.querySelector('.products') as HTMLElement;

      if (currentOpen && currentOpen !== parent) {
        // Hide the currently open section
        (currentOpen.querySelector('.pastitems') as HTMLElement).style.display = 'none';
        (currentOpen.querySelector('.products') as HTMLElement).style.display = 'none';
      }

      if (currentOpen === parent) {
        // Toggle current section
        pastItems.style.display = 'none';
        productsList.style.display = 'none';
        currentOpen = null;
      } else {
        // Show new section
        pastItems.style.display = 'block';
        productsList.style.display = 'block';
        currentOpen = parent;
      }

      event.stopPropagation();
    });
  });

  document.addEventListener('click', function(event) {
    if (currentOpen && !currentOpen.contains(event.target as Node)) {
      // Hide the currently open section if clicking outside
      (currentOpen.querySelector('.pastitems') as HTMLElement).style.display = 'none';
      (currentOpen.querySelector('.products') as HTMLElement).style.display = 'none';
      currentOpen = null;
    }
  });
});
</script>